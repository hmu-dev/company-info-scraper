name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort pylint mypy flake8 bandit

      - name: Run Black formatter check
        run: black --check .

      - name: Run isort import sorting check
        run: isort --check-only .

      - name: Run Pylint
        run: |
          pylint api/ --disable=C0114,C0116,R0903,W0613 --output-format=text

      - name: Run MyPy type checking
        run: mypy api/ --ignore-missing-imports

      - name: Run Flake8
        run: flake8 api/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Bandit security scan
        run: bandit -r api/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt
          pip install -r requirements-test.txt

      - name: Run tests with coverage
        run: |
          cd about-us-scraper-service
          pytest tests/ \
            --cov=api \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-report.xml \
            --html=pytest-report.html \
            --self-contained-html
        env:
          AWS_DEFAULT_REGION: us-west-2
          AWS_ACCESS_KEY_ID: testing
          AWS_SECRET_ACCESS_KEY: testing
          AWS_SECURITY_TOKEN: testing
          AWS_SESSION_TOKEN: testing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./about-us-scraper-service/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            about-us-scraper-service/pytest-report.xml
            about-us-scraper-service/pytest-report.html
            about-us-scraper-service/htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Bandit security linter
        run: |
          bandit -r api/ -f json -o bandit-report.json || true
          bandit -r api/

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt
          pip install -r requirements-api.txt

      - name: Test deployment package creation
        run: |
          cd about-us-scraper-service
          zip -r ../deployment.zip . -x "tests/*" "venv/*" "__pycache__/*" "*.pyc" "htmlcov/*" ".coverage"
          ls -la ../deployment.zip

      - name: Validate deployment package
        run: |
          unzip -t deployment.zip
          echo "Deployment package validation successful"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt
          pip install -r requirements-api.txt
          pip install pytest-benchmark

      - name: Run performance benchmarks
        run: |
          cd about-us-scraper-service
          pytest tests/ -m "slow" --benchmark-only --benchmark-save=benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: about-us-scraper-service/.benchmarks/
