name: Deploy AI Web Scraper

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-west-2
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt
          pip install -r requirements-test.txt

      - name: Run linting
        run: |
          black --check .
          isort --check-only .
          pylint api/ --disable=C0114,C0116,R0903,W0613
          mypy api/ --ignore-missing-imports

      - name: Run tests
        run: |
          cd about-us-scraper-service
          pytest tests/ --cov=api --cov-report=xml --cov-report=html --cov-report=term-missing
        env:
          AWS_DEFAULT_REGION: us-west-2
          AWS_ACCESS_KEY_ID: testing
          AWS_SECRET_ACCESS_KEY: testing
          AWS_SECURITY_TOKEN: testing
          AWS_SESSION_TOKEN: testing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./about-us-scraper-service/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt

      - name: Create deployment package
        run: |
          cd about-us-scraper-service
          zip -r ../deployment.zip . -x "tests/*" "venv/*" "__pycache__/*" "*.pyc" "htmlcov/*" ".coverage"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.zip
          retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./

      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli

      - name: Build SAM Application
        run: |
          cd about-us-scraper-service
          sam build --use-container

      - name: Deploy SAM Application
        if: github.event_name == 'push'
        run: |
          cd about-us-scraper-service
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset
        env:
          SAM_CLI_TELEMETRY: 0

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
