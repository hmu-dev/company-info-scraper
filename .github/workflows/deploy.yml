name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  AWS_REGION: "us-east-1"

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt
          pip install aws-sam-cli

      - name: Test API imports
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              # Test main API imports
              from api.main import app
              print('✅ FastAPI app import successful')
              print(f'App title: {app.title}')
              
              # Test video thumbnail functionality
              from api.utils.video_thumbnails import VideoThumbnailExtractor, extract_video_thumbnails_from_soup
              print('✅ Video thumbnail imports successful')
              
              # Test API v4 imports
              from api.main_v4 import app as app_v4
              print('✅ API v4 import successful')
              
              # Test split API imports
              from api.main_split import app as app_split
              print('✅ Split API import successful')
              
              print('🎉 ALL API IMPORTS WORKING! 🎉')
              
          except Exception as e:
              print(f'❌ Import failed: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: Build SAM Application
        run: |
          cd about-us-scraper-service
          sam build --template-file template-simple.yaml
        env:
          SAM_CLI_TELEMETRY: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-artifacts
          path: about-us-scraper-service/.aws-sam/

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sam-build-artifacts
          path: about-us-scraper-service/.aws-sam/

      - name: Check AWS credentials
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret not found"
            echo "Please configure AWS credentials in GitHub repository secrets"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret not found"
            echo "Please configure AWS credentials in GitHub repository secrets"
            exit 1
          fi
          echo "✅ AWS credentials found"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install AWS SAM CLI
        run: |
          python -m pip install --upgrade pip
          pip install aws-sam-cli

      - name: Deploy SAM Application
        run: |
          cd about-us-scraper-service
          sam deploy \
            --template-file template-simple.yaml \
            --config-file samconfig.toml \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              Environment=production
        env:
          SAM_CLI_TELEMETRY: 0

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          cd about-us-scraper-service
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ai-web-scraper \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "🌐 API Gateway URL: $API_URL"

      - name: Test deployed API
        run: |
          API_URL="${{ steps.get-api-url.outputs.api-url }}"
          if [ -n "$API_URL" ] && [ "$API_URL" != "None" ]; then
            echo "Testing deployed API at: $API_URL"
            
            # Test health endpoint
            echo "🔍 Testing health endpoint..."
            curl -f "$API_URL/health" && echo "✅ Health check passed" || echo "❌ Health check failed"
            
            # Test basic scraping
            echo "🔍 Testing basic scraping..."
            curl -f "$API_URL/scrape/text?url=github.com" && echo "✅ Basic scraping works" || echo "❌ Basic scraping failed"
            
            # Test video thumbnail functionality with a known video URL
            echo "🔍 Testing video thumbnail functionality..."
            curl -f "$API_URL/scrape/text?url=https://www.youtube.com/watch?v=dQw4w9WgXcQ" && echo "✅ Video thumbnail test passed" || echo "❌ Video thumbnail test failed"
            
            echo "🎉 API testing completed!"
          else
            echo "API URL not found, skipping health check"
          fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Notify Slack
        if: always() && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write
